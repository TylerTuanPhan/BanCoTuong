<script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js"></script>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<style>
    .chessboard {
        width: 850px;
        height: 850px;
        background-image: url("/Images/bancotuong.jpg");
        position: absolute;
    }

    .chessnode {
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .chessimgnode {
        width: 50px;
        height: 50px;
    }
</style>
<div id="app" style="min-height:800px">
    <div class="chessboard">
        <div v-for="item in chessNode" class="chessnode"
             v-on:dragstart="dragStart"
             v-on:dragend="dragEnd"
             :id="item.id" v-bind:style="{ display: item.visible, top: item.top + 'px', left: item.left + 'px' }">
            <img :src="'/' + item.src" class="chessimgnode" />
        </div>
    </div>
</div>

<script>
    var matrix = [];
    var app = new Vue({
        el: '#app',
        data: {
            chessNode: [],
            top: 0,
            left: 0

        },
        methods: {
            getChessNode() {
                axios({
                    url: '/api/chess/loadChessBoard',
                    method: 'GET',
                    responseType: 'Json',

                }).then((response) => {
                    this.chessNode = response.data.chessNode;
                    matrix = response.data.maxtrix;

                });
            },
            getIndexByTopLef(top, left, matrix) {
                var obj = {};
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (Math.abs(matrix[i][j].top - top) < 20 && Math.abs(matrix[i][j].left - left) < 20) {
                            obj.i = i;
                            obj.j = j;
                            obj.id = matrix[i][j].id;
                            return obj;
                        }
                    }
                }
                return null;
            },
            dragStart(event) {
                this.top = event.clientY;
                this.left = event.clientX;
            },
            dragEnd(event) {
                var id = event.currentTarget.id;
                var moveX = event.clientX - this.left;
                var moveY = event.clientY - this.top;
                moveX = moveX + event.currentTarget.offsetLeft;
                moveY = moveY + event.currentTarget.offsetTop;

                var nodeStart = this.getIndexByTopLef(event.currentTarget.offsetTop, event.currentTarget.offsetLeft, matrix);
                var nodeEnd = this.getIndexByTopLef(moveY, moveX, matrix);
                if (nodeEnd == null) {
                    return;
                }

                var objRemove = null;
                //xử lý cho quan mã. mấy đứa xử lý cho các quân khác ngay phía dưới quân mã

                if (id.indexOf('ma') >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    if (!((gapI == 1 && gapJ == 2) || (gapJ == 1 && gapI == 2))) {
                        return;
                    }
                    if ((gapI == 1 && gapJ == 2) && (nodeEnd.j > nodeStart.j)) {
                        if (matrix[nodeStart.i][nodeStart.j + 1].id != "") {
                            return;
                        }
                    }
                    if ((gapI == 1 && gapJ == 2) && (nodeEnd.j < nodeStart.j)) {
                        if (matrix[nodeStart.i][nodeStart.j - 1].id != "") {
                            return;
                        }
                    }

                    if ((gapI == 2 && gapJ == 1) && (nodeEnd.i > nodeStart.i)) {
                        if (matrix[nodeStart.i + 1][nodeStart.j].id != "") {
                            return;
                        }
                    }
                    if ((gapI == 2 && gapJ == 1) && (nodeEnd.i < nodeStart.i)) {
                        if (matrix[nodeStart.i - 1][nodeStart.j].id != "") {
                            return;
                        }
                    }
                    if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                        return;
                    }
                    else {
                        if (nodeEnd.id != "")//quan den
                        {
                            objRemove = { id: nodeEnd.id };
                        }

                    }
                }
                //end xử ly quan mã

                //xử lý quan tướng
                if (id.indexOf('tuong') >= 0) {
                    var tGapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var tGapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Tướng chỉ có thể di chuyển một ô
                    if ((tGapI > 1 || tGapJ > 1) || (nodeEnd.i < 0 || nodeEnd.i > 2 || nodeEnd.j < 3 || nodeEnd.j > 5)) {
                        return;
                    }

                    // Kiểm tra có quân cờ nào ở ô đích
                    if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                        return; // Không thể di chuyển đến ô có quân đỏ
                    } else {
                        if (nodeEnd.id != "") // Nếu có quân đen
                        {
                            objRemove = { id: nodeEnd.id };
                        }
                    }
                }
                // end xử lý quân Tướng
                // Xử lý quân Sĩ
                if (id.indexOf('si') >= 0) {
                    var sGapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var sGapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if ((sGapI != 1 || sGapJ != 1) || (nodeEnd.i < 0 || nodeEnd.i > 2 || nodeEnd.j < 3 || nodeEnd.j > 5)) {
                        return;
                    }

                    if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                        return;
                    } else {
                        if (nodeEnd.id != "") {
                            objRemove = { id: nodeEnd.id };
                        }
                    }
                }

                // Xử lý quân Tượng
                if (id.indexOf('tuong') >= 0) {
                    var eGapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var eGapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if (eGapI !== 2 || eGapJ !== 2) {
                        return;
                    }

                    if (matrix[(nodeStart.i + nodeEnd.i) / 2][(nodeStart.j + nodeEnd.j) / 2].id != "") {
                        return; // Có quân cản trở
                    }

                    if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                        return;
                    } else {
                        if (nodeEnd.id != "") {
                            objRemove = { id: nodeEnd.id };
                        }
                    }
                }

                // Xử lý quân Xe
                if (id.indexOf('xe') >= 0) {
                    var xGapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var xGapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if (xGapI != 0 && xGapJ != 0) {
                        return; // Xe không thể di chuyển chéo
                    }

                    var stepI = xGapI === 0 ? 0 : (nodeEnd.i - nodeStart.i) / xGapI; // Di chuyển dọc
                    var stepJ = xGapJ === 0 ? 0 : (nodeEnd.j - nodeStart.j) / xGapJ; // Di chuyển ngang

                    for (let i = nodeStart.i + stepI, j = nodeStart.j + stepJ; (i !== nodeEnd.i || j !== nodeEnd.j); i += stepI, j += stepJ) {
                        if (matrix[i][j].id != "") {
                            return; // Có quân cản trở
                        }
                    }

                    if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                        return;
                    } else {
                        if (nodeEnd.id != "") {
                            objRemove = { id: nodeEnd.id };
                        }
                    }
                }

                // Xử lý quân Pháo
                if (id.indexOf('phao') >= 0) {
                    var pGapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var pGapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if (pGapI != 0 && pGapJ != 0) {
                        return; // Pháo không thể di chuyển chéo
                    }

                    var stepI = pGapI === 0 ? 0 : (nodeEnd.i - nodeStart.i) / pGapI; // Di chuyển dọc
                    var stepJ = pGapJ === 0 ? 0 : (nodeEnd.j - nodeStart.j) / pGapJ; // Di chuyển ngang

                    var count = 0;
                    for (let i = nodeStart.i + stepI, j = nodeStart.j + stepJ; (i !== nodeEnd.i || j !== nodeEnd.j); i += stepI, j += stepJ) {
                        if (matrix[i][j].id != "") {
                            count++;
                        }
                    }

                    if (count === 0) {
                        return; // Không có quân ở giữa thì không được di chuyển
                    }

                    if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                        return;
                    } else {
                        if (nodeEnd.id != "") {
                            objRemove = { id: nodeEnd.id };
                        }
                    }
                }

                // Xử lý quân Binh
                if (id.indexOf('binh') >= 0) {
                    var bGapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var bGapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Binh có thể di chuyển 1 ô về phía trước hoặc sang trái, phải nếu đã qua sông
                    if ((bGapI != 1 || bGapJ != 0) && (bGapI != 0 || (bGapJ != 1 && bGapJ != -1))) {
                        return; // Không di chuyển hợp lệ
                    }

                    if (nodeEnd.i <= 5 && (bGapJ != 0)) { // Chưa qua sông
                        return; // Không thể di chuyển sang trái phải
                    }

                    if (nodeEnd.id != "" && nodeEnd.id.indexOf('do') > 0) {
                        return;
                    } else {
                        if (nodeEnd.id != "") {
                            objRemove = { id: nodeEnd.id };
                        }
                    }
                }
                let params = new URL(document.location.toString()).searchParams;
                let roomId = params.get("roomId");
                var para = [{ id: id, fromi: nodeStart.i, fromj: nodeStart.j, toi: nodeEnd.i, toj: nodeEnd.j }];
                if (objRemove != null) {
                    para.push(objRemove);
                }
                axios({
                    url: '/api/chess/move-check-node?roomId=' + roomId,
                    method: 'Post',
                    responseType: 'Json',
                    data: para
                }).then((response) => {


                });

            }
        },
        mounted: function () {
            this.getChessNode();
            let params = new URL(document.location.toString()).searchParams;
            let roomId = params.get("roomId");
            var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub?roomId=" + roomId).build();
            connection.on("ReceiveChessMove", function (message) {
                console.log(message);
                var response = JSON.parse(message);
                matrix[response[0].fromi][response[0].fromj].id = "";
                var nodeEnd = matrix[response[0].toi][response[0].toj];
                nodeEnd.id = response[0].id;


                var obj = document.getElementById(response[0].id);
                obj.style.top = nodeEnd.top + 'px';
                obj.style.left = nodeEnd.left + 'px';

                if (response.length > 1) {
                    var temp = document.getElementById(response[1].id);
                    temp.style.display = "none";
                }
            });

            connection.start().then(function () {

            }).catch(function (err) {
                return console.error(err.toString());
            });
        }
    });
</script>